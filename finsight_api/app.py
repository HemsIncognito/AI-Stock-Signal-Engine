# app.py

import streamlit as st
import requests
import pandas as pd
import plotly.graph_objects as go

# --- Page Configuration ---
st.set_page_config(
    page_title="FinSight Engine",
    page_icon="ðŸ’¡",
    layout="wide"
)

# --- API URL ---
FINSIGHT_API_URL = "http://127.0.0.1:8000/stocks/analyze"

# --- Helper Functions ---
def call_finsight_api(ticker, country):
    """Calls the FinSight API and returns the JSON response."""
    payload = {"ticker": ticker, "country": country}
    try:
        response = requests.post(FINSIGHT_API_URL, json=payload, timeout=300)
        response.raise_for_status()  # Raises an exception for 4XX/5XX errors
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"API Error: {e}")
        return None

def display_results(data):
    """Displays the analysis results in a structured Streamlit layout."""
    st.divider()
    
    # --- Header Section ---
    st.header(f"{data['company_name']} ({data['ticker']})")
    
    rec_color = "green" if data['final_recommendation'] == "Buy" else "red" if data['final_recommendation'] == "Sell" else "orange"
    st.metric(
        "Final Recommendation", 
        data['final_recommendation'], 
        f"Confidence: {data['recommendation_confidence']:.0%}",
        help="This recommendation is generated by fusing forecast trends, news sentiment, and LLM-generated insights."
    )
    
    # --- Main Analysis Columns ---
    col1, col2 = st.columns(2)
    
    # --- Column 1: Forecast ---
    with col1:
        st.subheader("Price Forecast")
        forecast_data = data['forecast']
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=list(range(1, forecast_data['prediction_days'] + 1)),
            y=forecast_data['forecasted_prices'],
            mode='lines+markers',
            name='Forecasted Price'
        ))
        fig.update_layout(
            title=f"Forecasted Trend: {forecast_data['trend']}",
            xaxis_title="Trading Days from Now",
            yaxis_title="Price (USD/Local Currency)",
            margin=dict(l=20, r=20, t=40, b=20)
        )
        st.plotly_chart(fig, use_container_width=True)

    # --- Column 2: Sentiment ---
    with col2:
        st.subheader("News Sentiment")
        sentiment_data = data['sentiment']
        sentiment_df = pd.DataFrame([sentiment_data['sentiment_scores']]).T.reset_index()
        sentiment_df.columns = ['Sentiment', 'Score']

        # Create a list of colors that maps to the order of sentiments in the DataFrame
        color_map = {'Bullish': 'green', 'Bearish': 'red', 'Neutral': 'grey'}
        colors = [color_map.get(s, 'grey') for s in sentiment_df['Sentiment']]

        fig = go.Figure(go.Bar(
            x=sentiment_df['Score'],
            y=sentiment_df['Sentiment'],
            orientation='h',
            marker_color=colors # Use the new list of colors
        ))
        
        fig.update_layout(
            title=f"Dominant Sentiment: {sentiment_data['dominant_sentiment']}",
            xaxis_title="Proportion of News Articles",
            yaxis_title="",
            margin=dict(l=20, r=20, t=40, b=20)
        )
        st.plotly_chart(fig, use_container_width=True)

    # --- LLM Insights Section ---
    st.divider()
    st.subheader("AI-Generated Insights")
    insights_data = data['insights']
    if insights_data:
        for insight in insights_data:
            with st.expander(f"**{insight['impact']}**: {insight['insight'][:80]}..."):
                st.write(insight['insight'])
    else:
        st.info("No AI-generated insights were available for this stock.")


# --- UI Elements ---
st.title("ðŸ’¡ FinSight Analysis Engine")
st.markdown("Enter a stock ticker and country to get a multi-pronged analysis including sentiment, forecasting, and AI-generated insights.")

col1, col2, col3 = st.columns([1, 1, 2])
with col1:
    ticker_input = st.text_input("Ticker Symbol", placeholder="e.g., AAPL").upper()
with col2:
    country_input = st.text_input("Country Code", value="US", placeholder="e.g., US, IN, HK").upper()

if st.button("Analyze Stock", type="primary"):
    if not ticker_input:
        st.warning("Please enter a ticker symbol.")
    else:
        with st.spinner(f"Running analysis for {ticker_input}... This may take a moment."):
            analysis_data = call_finsight_api(ticker_input, country_input)
        
        if analysis_data:
            display_results(analysis_data)